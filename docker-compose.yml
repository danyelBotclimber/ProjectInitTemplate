version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - JWT_SECRET=your_jwt_secret
      - JWT_EXPIRES_IN=1d
      - GOOGLE_CLIENT_ID=your_google_client_id
      - GOOGLE_CLIENT_SECRET=your_google_client_secret
      - GOOGLE_CALLBACK_URL=http://localhost:3000/api/auth/google/callback
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=backend_template
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
    command: sh -c "until nc -z postgres 5432; do echo 'Waiting for postgres...'; sleep 1; done; echo 'Postgres is ready!'; npm run dev"
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:3000/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - app
    networks:
      - app-network

  test:
    build: 
      context: .
      dockerfile: Dockerfile.test
    environment:
      - NODE_ENV=test
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=backend_template_test
      - JWT_SECRET=test_jwt_secret
      - JWT_EXPIRES_IN=1h
      - GOOGLE_CLIENT_ID=test_google_client_id
      - GOOGLE_CLIENT_SECRET=test_google_client_secret
      - GOOGLE_CALLBACK_URL=http://localhost:3000/api/auth/google/callback
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
    command: sh -c "until nc -z postgres 5432; do echo 'Waiting for postgres...'; sleep 1; done; echo 'Postgres is ready!'; node ./node_modules/jest/bin/jest.js"
    networks:
      - app-network

  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=backend_template
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge 